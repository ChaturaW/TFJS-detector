{"version":3,"sources":["logo.svg","Components/CocoSsdDetector.js","App.js","reportWebVitals.js","index.js"],"names":["CocoSsdDetector","useState","isShowVideo","setIsShowVideo","webcamElement","useRef","canvasRef","refreshIntervalId","undefined","detect","model","a","current","video","width","videoWidth","height","videoHeight","console","log","obj","canv","getContext","drawBoundingBox","detections","forEach","prediction","x","y","text","color","strokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","onClick","cocoSsd","then","mdl","setInterval","clearInterval","stream","getTracks","track","stop","className","audio","ref","videoConstraints","facingMode","style","position","marginLeft","marginRight","left","right","textAlign","zindex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAAe,I,iFCyHAA,MApHf,WAA4B,IAAD,EAEeC,oBAAS,GAFxB,mBAEhBC,EAFgB,KAEHC,EAFG,KAGjBC,EAAgBC,iBAAO,MACvBC,EAAYD,iBAAO,MAErBE,OAAoBC,EA+BlBC,EAAM,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,0DACPP,EAAcQ,QADP,wBAEDC,EAAQT,EAAcQ,QAAQC,MAEpCP,EAAUM,QAAQE,MAAQD,EAAME,WAChCT,EAAUM,QAAQI,OAASH,EAAMI,YAEjCC,QAAQC,IAAI,eAPL,SAQWT,EAAMD,OAAOI,GARxB,OAQDO,EARC,OASPF,QAAQC,IAAIC,GAENC,EAAOf,EAAUM,QAAQU,WAAW,MAC1CC,EAAgBH,EAAKC,GAZd,4CAAH,sDAgBNE,EAAkB,SAACC,EAAYH,GACjCG,EAAWC,SAAQ,SAAAC,GAAe,IAAD,cACCA,EAAU,KADX,GACtBC,EADsB,KACnBC,EADmB,KAChBd,EADgB,KACTE,EADS,KAEvBa,EAAOH,EAAU,MAEvBR,QAAQC,IAAIQ,EAAGC,EAAGd,EAAOE,GACzBE,QAAQC,IAAIU,GAEZ,IAAMC,EAAQ,QACdT,EAAKU,YAAcD,EACnBT,EAAKW,KAAO,aACZX,EAAKY,UAAYH,EAEjBT,EAAKa,YACLb,EAAKc,SAASN,EAAMF,EAAGC,GACvBP,EAAKe,KAAKT,EAAGC,EAAGd,EAAOE,GACvBK,EAAKgB,aAIb,OACI,gCACI,wBAAQC,QAnDC,WACbnC,GAAe,IAkDX,yBACA,wBAAQmC,QApEO,WACnBC,SAAeC,MAAK,SAAA9B,GAChB,IAAM+B,EAAM/B,EAEZH,EAAoBmC,aAAY,WAC5BjC,EAAOgC,KACR,QA8DH,oBACA,wBAAQH,QAjDA,WACZK,cAAcpC,GAEDH,EAAcQ,QAAQgC,OACbC,YACfpB,SAAQ,SAAAqB,GAAK,OAAIA,EAAMC,UAC9B5C,GAAe,IA2CX,wBAEA,qBAAK6C,UAAU,UAAf,SACK9C,GACG,gCACI,cAAC,IAAD,CAAQ+C,OAAO,EAAOC,IAAK9C,EAAe+C,iBAhErC,CACrBrC,MAAO,IACPE,OAAQ,IACRoC,WAAY,eA8DQC,MAAO,CACHC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACR9C,MAAO,IACPE,OAAQ,OAGhB,wBACIkC,IAAK5C,EACL+C,MAAO,CACHC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACR9C,MAAO,IACPE,OAAQ,gBCnGzB6C,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAAC,EAAD,OCKSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6013255d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport * as tf from '@tensorflow/tfjs';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n\nfunction CocoSsdDetector() {\n\n    const [isShowVideo, setIsShowVideo] = useState(true);\n    const webcamElement = useRef(null);\n    const canvasRef = useRef(null);\n\n    let refreshIntervalId = undefined;\n\n    const startDetection = () => {\n        cocoSsd.load().then(model => {\n            const mdl = model;\n\n            refreshIntervalId = setInterval(() => {\n                detect(mdl);\n            }, 10);\n        });\n    }\n\n    const videoConstraints = {\n        width: 640,\n        height: 480,\n        facingMode: \"environment\"\n    }\n\n    const startCam = () => {\n        setIsShowVideo(true);\n    }\n\n    const stopCam = () => {\n        clearInterval(refreshIntervalId);\n\n        let stream = webcamElement.current.stream;\n        const tracks = stream.getTracks();\n        tracks.forEach(track => track.stop());\n        setIsShowVideo(false);\n    }\n\n    const detect = async (model) => {\n        if (webcamElement.current) {\n            const video = webcamElement.current.video;\n\n            canvasRef.current.width = video.videoWidth;\n            canvasRef.current.height = video.videoHeight;\n\n            console.log(\"detecting..\")\n            const obj = await model.detect(video);\n            console.log(obj);\n\n            const canv = canvasRef.current.getContext(\"2d\");\n            drawBoundingBox(obj, canv);\n        }\n    };\n\n    const drawBoundingBox = (detections, canv) => {\n        detections.forEach(prediction => {\n            const [x, y, width, height] = prediction[\"bbox\"];\n            const text = prediction[\"class\"];\n\n            console.log(x, y, width, height);\n            console.log(text);\n\n            const color = \"green\";\n            canv.strokeStyle = color;\n            canv.font = \"18px Arial\";\n            canv.fillStyle = color;\n\n            canv.beginPath();\n            canv.fillText(text, x, y);\n            canv.rect(x, y, width, height);\n            canv.stroke();\n        })\n    }\n\n    return (\n        <div>\n            <button onClick={startCam}>Start Video</button>\n            <button onClick={startDetection}>Detect</button>\n            <button onClick={stopCam}>Stop Video</button>\n\n            <div className=\"camView\">\n                {isShowVideo &&\n                    <div>\n                        <Webcam audio={false} ref={webcamElement} videoConstraints={videoConstraints}\n                            style={{\n                                position: \"absolute\",\n                                marginLeft: \"auto\",\n                                marginRight: \"auto\",\n                                left: 0,\n                                right: 0,\n                                textAlign: \"center\",\n                                zindex: 9,\n                                width: 640,\n                                height: 480,\n                            }}\n                        />\n                        <canvas\n                            ref={canvasRef}\n                            style={{\n                                position: \"absolute\",\n                                marginLeft: \"auto\",\n                                marginRight: \"auto\",\n                                left: 0,\n                                right: 0,\n                                textAlign: \"center\",\n                                zindex: 8,\n                                width: 640,\n                                height: 480\n                            }}\n                        />\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default CocoSsdDetector;","import logo from './logo.svg';\nimport './App.css';\nimport CocoSsdDetector from './Components/CocoSsdDetector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CocoSsdDetector />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}