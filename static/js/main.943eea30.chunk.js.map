{"version":3,"sources":["logo.svg","Components/CocoSsdDetector.js","App.js","reportWebVitals.js","index.js"],"names":["CocoSsdDetector","useState","isShowVideo","setIsShowVideo","faVideoSlash","videoIcon","setVideoIcon","webcamRef","useRef","canvasRef","refreshIntervalId","undefined","detect","model","a","current","video","width","videoWidth","height","videoHeight","console","log","detections","canv","getContext","drawBoundingBox","forEach","prediction","x","y","text","strokeStyle","font","fillStyle","beginPath","rect","fillText","stroke","onClick","clearInterval","stream","getTracks","track","stop","faVideo","icon","size","cocoSsd","then","mdl","setInterval","faBrain","className","audio","ref","videoConstraints","facingMode","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAAe,I,mGCgGAA,MAzFf,WAA4B,IAAD,EAEeC,oBAAS,GAFxB,mBAEhBC,EAFgB,KAEHC,EAFG,OAGWF,mBAASG,KAHpB,mBAGhBC,EAHgB,KAGLC,EAHK,KAIjBC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAErBE,OAAoBC,EAgClBC,EAAM,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,0DACPP,EAAUQ,QADH,wBAEDC,EAAQT,EAAUQ,QAAQC,MAEhCP,EAAUM,QAAQE,MAAQD,EAAME,WAChCT,EAAUM,QAAQI,OAASH,EAAMI,YAEjCC,QAAQC,IAAI,eAPL,SAQkBT,EAAMD,OAAOI,GAR/B,OAQDO,EARC,OASPF,QAAQC,IAAIC,GAENC,EAAOf,EAAUM,QAAQU,WAAW,MAC1CC,EAAgBH,EAAYC,GAZrB,4CAAH,sDAgBNE,EAAkB,SAACH,EAAYC,GACjCD,EAAWI,SAAQ,SAAAC,GAAe,IAAD,cACCA,EAAU,KADX,GACtBC,EADsB,KACnBC,EADmB,KAChBb,EADgB,KACTE,EADS,KAEvBY,EAAOH,EAAU,MAGvBJ,EAAKQ,YADS,MAEdR,EAAKS,KAAO,aACZT,EAAKU,UAHS,MAKdV,EAAKW,YACLX,EAAKY,KAAKP,EAAGC,EAAGb,EAAOE,GACvBK,EAAKU,UAAY,QACjBV,EAAKa,SAASN,EAAMF,EAAGC,EAAI,IAC3BN,EAAKc,aAIb,OACI,gCACI,wBAAQC,QAjDE,WACVrC,GACAsC,cAAc9B,GACCH,EAAUQ,QAAQ0B,OAAOC,YACjCf,SAAQ,SAAAgB,GAAK,OAAIA,EAAMC,UAC9BzC,GAAe,GACfG,EAAauC,OAEb1C,GAAe,GACfG,EAAaF,OAwCb,SAA4B,cAAC,IAAD,CAAiB0C,KAAMzC,EAAW0C,KAAK,SACnE,wBAAQR,QAnEO,WAEfrC,GACA8C,SAAeC,MAAK,SAAApC,GAChB,IAAMqC,EAAMrC,EAEZH,EAAoByC,aAAY,WAC5BvC,EAAOsC,KACR,QA2DP,SAAiC,cAAC,IAAD,CAAiBJ,KAAMM,IAASL,KAAK,SACtE,8BACK7C,GACG,sBAAKmD,UAAU,UAAf,UACI,8BAAK,cAAC,IAAD,CAAQC,OAAO,EAAOC,IAAKhD,EAAWiD,iBA1DtC,CACrBC,WAAY,eAyDmFJ,UAAU,aACzF,8BAAK,wBAAQE,IAAK9C,EAAW4C,UAAU,sBC5EhDK,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCKSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.943eea30.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport * as tf from '@tensorflow/tfjs';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faVideo, faVideoSlash, faBrain } from '@fortawesome/free-solid-svg-icons';\n\nfunction CocoSsdDetector() {\n\n    const [isShowVideo, setIsShowVideo] = useState(true);\n    const [videoIcon, setVideoIcon] = useState(faVideoSlash);\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    let refreshIntervalId = undefined;\n\n    const startDetection = () => {\n        //console.log(isShowVideo);\n        if (isShowVideo) {\n            cocoSsd.load().then(model => {\n                const mdl = model;\n\n                refreshIntervalId = setInterval(() => {\n                    detect(mdl);\n                }, 10);\n            });\n        }\n    }\n\n    const videoConstraints = {\n        facingMode: \"environment\"\n    }\n\n    const toggleCam = () => {\n        if (isShowVideo) {\n            clearInterval(refreshIntervalId);\n            const tracks = webcamRef.current.stream.getTracks();\n            tracks.forEach(track => track.stop());\n            setIsShowVideo(false);\n            setVideoIcon(faVideo);\n        } else {\n            setIsShowVideo(true);\n            setVideoIcon(faVideoSlash);\n        }\n    }\n\n    const detect = async (model) => {\n        if (webcamRef.current) {\n            const video = webcamRef.current.video;\n\n            canvasRef.current.width = video.videoWidth;\n            canvasRef.current.height = video.videoHeight;\n\n            console.log(\"detecting..\")\n            const detections = await model.detect(video);\n            console.log(detections);\n\n            const canv = canvasRef.current.getContext(\"2d\");\n            drawBoundingBox(detections, canv);\n        }\n    };\n\n    const drawBoundingBox = (detections, canv) => {\n        detections.forEach(prediction => {\n            const [x, y, width, height] = prediction[\"bbox\"];\n            const text = prediction[\"class\"];\n\n            const color = \"red\";\n            canv.strokeStyle = color;\n            canv.font = \"24px Arial\";\n            canv.fillStyle = color;\n\n            canv.beginPath();\n            canv.rect(x, y, width, height);\n            canv.fillStyle = \"white\";\n            canv.fillText(text, x, y - 10);\n            canv.stroke();\n        })\n    }\n\n    return (\n        <div>\n            <button onClick={toggleCam}><FontAwesomeIcon icon={videoIcon} size=\"3x\" /></button>\n            <button onClick={startDetection}><FontAwesomeIcon icon={faBrain} size=\"3x\" /></button>\n            <div>\n                {isShowVideo &&\n                    <div className=\"camView\">\n                        <div><Webcam audio={false} ref={webcamRef} videoConstraints={videoConstraints} className=\"webcam\" /></div>\n                        <div><canvas ref={canvasRef} className=\"canvas\" /></div>\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default CocoSsdDetector;","import logo from './logo.svg';\nimport './App.css';\nimport CocoSsdDetector from './Components/CocoSsdDetector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CocoSsdDetector />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}